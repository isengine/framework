Базовая инфа такая

Запрос происходит через адрес апи, например:

site.com/api/...

Язык можно указывать двумя способами:

site.com/api/ru/...
site.com/ru/api/...

и тот, и другой, считаются равноправными и одинаково управляют языком

далее

апи - это в первую очередь контроллер, и, соответственно, он должен быть целиком разработан на стороне ядра
однако, возможно также, что мы зададим базовые методы работы с апи во фреймворке
и таким образом, контроллер будет использовать модель апи, которая задана во фреймворке

далее

апи через урл распознает метод запроса таким образом:

site.com/api/class_name/method_name

Дело в том, что все методы собраны в опредленном классе. Например:

класс user содержит методы authorise, confirm, logout, register
класс system - backup, captcha, cookiesagree, write

и другие

Все методы располагаются в соответствующем пространстве имен, а именно:

is\Model\Api\Methods\class_name

При вызове апи запускается соответствующий метод из класса:

$api = new class_name;
$api -> method_name();

В метод можно передать различные параметры. Эти параметры могут быть переданы двумя способами:

через урл, например:

site.com/api/class_name/method_name/key1/value1/key2/value2/

через параметры get-запроса, например:

site.com/api/class_name/method_name?key1=value1&key2=value2

Однако

параметры запроса будут передаваться в модель апи фреймворка из контроллера апи ядра в виде массива данных
так что модель будет только вызывать класс и метод
а вот подготавливать массив данных и проверять разрешения будет контроллер

Безопасность

Чтобы обезопасить систему от вызова каких угодно методов,
во-первых, методы нужно зарегистрировать в соответствующем разделе базы данных,
а во-вторых, определенным группам пользователей можно ограничить доступ к записям в этой базе данных




