<?php

namespace is\Controller;

use is\Parents\Data;
use is\Helpers\Local;
use is\Helpers\Strings;
use is\Helpers\Objects;
use is\Helpers\Parser;

abstract class Driver extends Data {
	
	/*
	это фактически интерфейс драйвера
	
	работаем с подготовленными запросами
	пока это происходит так
	заполняем данные в публичные свойства
	затем остается вызвать метод launch, который сформирует эти данные в готовый запрос, записав его в строку prepare
	и по этой строке соединится с базой данных
	возвращенные данные будут записаны в массив $data
	
	идея прав такова, что доступ будет назначаться только к тем полям и записям базы, которые разрешены
	но это будет происходить снаружи, т.е. не в драйвере
	то же самое касается фильтрации, сортировки и обрезки значений
	кстати, возвращенные данные должны быть перенесены и записаны в коллекцию
	
	чтение - здесь все понятно
	запись - имеется ввиду запись и перезапись существующих
	добавление - только новая запись, если такая запись уже есть, то она не перезаписывается
	удаление - здесь тоже все понятно
	
	чтобы создать и подключить свой собственный драйвер, нужно создать класс, наследующий данный класс
	и поместить его в пространство имен is\Controller\Drivers
	подключить данный файл (или поместить его в папку фреймворка, что не рекомендуется)
	а затем, если вы работаете с ядром, проинициализировать его в настройках ядра
	
	в дальнейшем мы добавим классы по работе через PDO и, возможно, подключим сторонние библиотеки в проект
	*/
	
	public $prepare;
	public $settings;
	public $cache;
	public $hash;
	
	public $query; // тип запроса в базу данных - чтение, запись, добавление, удаление
	public $collection; // раздел базы данных
	
	/*
	public $id; // имя или имена записей в базе данных
	public $name; // имя или имена записей в базе данных
	public $type; // тип или типы записей в базе данных
	public $parents; // родитель или родители записей в базе данных
	public $owner; // владелец или владельцы записей в базе данных
	
	public $ctime; // дата и время (в формате unix) создания записи в базе данных
	public $mtime; // дата и время (в формате unix) последнего изменения записи в базе данных
	public $dtime; // дата и время (в формате unix) удаления записи в базе данных
	*/
	
	public $filter; // параметры фильтрации результата из базы данных
	public $fields; // параметры правил обработки полей
	
	public function __construct($settings) {
		$this -> settings = $settings;
		$this -> filter = [
			'method' => 'and',
			'filters' => []
		];
	}
	
	abstract public function connect();
	abstract public function close();
	abstract public function launch();
	
	abstract public function prepare();
	
	public function cache($path) {
		if (!file_exists($path)) {
			Local::createFolder($path);
		}
		$this -> cache = $path;
	}
	
	public function readCache() {
		$path = $this -> cache . $this -> collection . DS . $this -> hash . '.ini';
		if (file_exists($path)) {
			
			foreach (Local::readFile($path) as $line) {
				echo $line;
			}
			
			//$file = Local::openFile($path);
			//return Parser::fromJson($file);
			
		}
	}
	
	public function writeCache() {
		$file = $this -> cache . $this -> collection . DS . $this -> hash . '.ini';
		$data = Parser::toJson($this -> data, true);
		Local::createFile($file);
		Local::saveFile($file, $data, 'replace');
	}
	
	public function hash() {
		$json = json_encode($this -> filter) . json_encode($this -> fields);
		$this -> hash = md5($json) . '.' . Strings::len($json) . '.' . (int) $this -> settings['all'] . '.' . $this -> settings['limit'];
	}
	
	public function read() {
		
		$this -> hash();
		$this -> resetData();
		
		if ($this -> cache) {
			$this -> data = $this -> readCache();
		}
		
		if (!$this -> data && !is_array($this -> data)) {
			$this -> prepare();
			if ($this -> cache) {
				$this -> writeCache();
			}
		}
		
		if (!is_array($this -> data)) {
			$this -> resetData();
		}
		
	}
	
	public function collection($name) {
		$this -> collection = $name;
	}
	
	public function query($name) {
		$this -> query = $name;
	}
	
	public function settings($key, $item) {
		$this -> settings[$key] = $item;
	}
	
	public function fields($key, $item) {
		$this -> fields[$key] = $item;
	}
	
	public function methodFilter($name) {
		$this -> filter['method'] = $name;
	}
	
	public function resetFilter() {
		$this -> filter['filters'] = [];
	}
	
	public function addFilter($name = null, $data = null) {
		
		if (is_array($name)) {
			$this -> filter['filters'][] = $name;
		} else {
			
			$item = [
				'name' => null,
				'data' => null,
				'values' => []
			];
			
			$array = Parser::fromString($name);
			$item['name'] = Objects::first($array, 'value');
			if ($item['name'] === 'data') {
				$item['name'] = Objects::n($array, 1, 'value');
				$item['data'] = true;
			}
			unset($array);
			
			if ($data) {
				$array = Parser::fromString($data);
				foreach ($array as $i) {
					
					$value = [
						'name' => null,
						'type' => 'equal',
						'require' => null,
						'except' => null
					];
					
					$first = Strings::first($i);
					$num = Strings::match($i, '_');
					
					if ($first === '+') {
						$value['require'] = true;
						$value['name'] = Strings::unfirst($i);
					} elseif ($first === '-') {
						$value['except'] = true;
						$value['name'] = Strings::unfirst($i);
					} elseif ($first === '*') {
						$value['type'] = 'string';
						$value['name'] = Strings::unfirst($i);
					} elseif ($num) {
						$value['type'] = 'numeric';
						$value['name'] = Strings::split($i, '_');
						foreach ($value['name'] as &$ii) {
							if ($ii) {
								$ii = Prepare::numeric($ii);
							}
						}
						unset($ii);
					} else {
						$value['name'] = $i;
					}
					
					$item['values'][] = $value;
					
					unset($value);
					
				}
				unset($i, $array);
			} else {
				$item['values'][] = ['type' => 'noempty'];
			}
			
			$this -> filter['filters'][] = $item;
			
			unset($item);
			
			//echo '<pre>' . print_r($item, 1) . '</pre><br>';
			//$this -> driver -> $name = $data;
			
		}
		
	}
	
	public function filter($entry) {
		
		if (!$entry || !$this -> filter) {
			return true;
		}

		$and = $this -> filter['method'] === 'and';
		
		$tpass = $and;
		
		foreach ($this -> filter['filters'] as $key => $item) {
			
			if ($item['data']) {
				$data = $entry['data'][$item['name']];
			} else {
				$data = $entry[$item['name']];
			}
			
			$gpass = null;
			
			foreach ($item['values'] as $i) {
				
				//if ($i['type'] === 'noempty') {
				//	$pass = System::set($data);
				//} elseif ($i['type'] === 'equal') {
				//	$pass = is_array($data) ? Match::equalIn($data, $i['name'], null) : Match::equal($data, $i['name']);
				//} elseif ($i['type'] === 'string') {
				//	$pass = is_array($data) ? Match::stringIn($data, $i['name'], null) : Match::string($data, $i['name']);
				//} elseif ($i['type'] === 'numeric') {
				//	$pass = is_array($data) ? Match::numericIn($data, $i['name'][0], $i['name'][1], null) : Match::numeric($data, $i['name']);
				//}
				
				if ($i['type'] === 'noempty') {
					$pass = System::set($data);
				} else {
					$func = $i['type'] . (is_array($data) ? 'In' : null);
					if ($i['type'] === 'numeric') {
						$pass = Match::$func($data, $i['name'][0], $i['name'][1], null);
					} else {
						$pass = Match::$func($data, $i['name'], null);
					}
					unset($func);
				}
				
				if ($item['except']) {
					$pass = !$pass;
				}
				
				if ($item['require'] && !$pass) {
					$gpass = null;
					break;
				}
				
				if ($pass || $gpass) {
					$gpass = true;
				}
				
				unset($pass);
				//echo '<pre>I:' . print_r($i, 1) . '</pre>';
				
			}
			unset($i);
			
			if ($and && $gpass && $tpass) {
				$tpass = true;
			} elseif (!$and && ($gpass || $tpass)) {
				$tpass = true;
			} else {
				$tpass = null;
			}
			
			unset($gpass);
			
			//echo '<pre>' . print_r($entry, 1) . '</pre>';
			//echo '<pre>' . print_r($item, 1) . '</pre>';
			//echo '<pre>DATA:' . print_r($data, 1) . '</pre>';
			//echo '<pre>RESULT:' . print_r($tpass, 1) . '</pre>';
			//echo '<hr>';
			
		}
		unset($key, $item);
		
		//echo '<pre>RESULT:' . print_r($tpass, 1) . '</pre>';
		// если вернуть пустое значение, то текущая запись не внесется в общий лист
		
		return $tpass;
		
	}
	
	public function verifyName($name) {
		
		return !$name || !$this -> settings['all'] && Strings::first($name) === '!' ? null : true;
		
	}

	public function verifyTime($entry) {
		
		$result = true;
		if (!$this -> settings['all']) {
			$time = time();
			if (
				($entry['ctime'] && $entry['ctime'] > $time) ||
				($entry['dtime'] && $entry['dtime'] < $time)
			) {
				$result = null;
			}
		}
		return $result;
		
	}

}

?>