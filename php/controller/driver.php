<?php

namespace is\Controller;

use is\Parents\Data;

abstract class Driver extends Data {
	
	/*
	это фактически интерфейс драйвера
	
	работаем с подготовленными запросами
	пока это происходит так
	заполняем данные в публичные свойства
	затем остается вызвать метод launch, который сформирует эти данные в готовый запрос, записав его в строку prepare
	и по этой строке соединится с базой данных
	возвращенные данные будут записаны в массив $data
	
	идея прав такова, что доступ будет назначаться только к тем полям и записям базы, которые разрешены
	но это будет происходить снаружи, т.е. не в драйвере
	то же самое касается фильтрации, сортировки и обрезки значений
	кстати, возвращенные данные должны быть перенесены и записаны в коллекцию
	
	чтение - здесь все понятно
	запись - имеется ввиду запись и перезапись существующих
	добавление - только новая запись, если такая запись уже есть, то она не перезаписывается
	удаление - здесь тоже все понятно
	
	чтобы создать и подключить свой собственный драйвер, нужно создать класс, наследующий данный класс
	и поместить его в пространство имен is\Controller\Drivers
	подключить данный файл (или поместить его в папку фреймворка, что не рекомендуется)
	а затем, если вы работаете с ядром, проинициализировать его в настройках ядра
	
	в дальнейшем мы добавим классы по работе через PDO и, возможно, подключим сторонние библиотеки в проект
	*/
	
	protected $prepare;
	protected $settings;
	private $cachestorage;
	
	public $query; // тип запроса в базу данных - чтение, запись, добавление, удаление
	public $collection; // раздел базы данных
	
	/*
	public $id; // имя или имена записей в базе данных
	public $name; // имя или имена записей в базе данных
	public $type; // тип или типы записей в базе данных
	public $parents; // родитель или родители записей в базе данных
	public $owner; // владелец или владельцы записей в базе данных
	
	public $ctime; // дата и время (в формате unix) создания записи в базе данных
	public $mtime; // дата и время (в формате unix) последнего изменения записи в базе данных
	public $dtime; // дата и время (в формате unix) удаления записи в базе данных
	*/
	
	public $limit; // установить возвращаемое количество записей в базе данных
	public $filter; // параметры фильтрации результата из базы данных
	public $sort; // параметры сортировки резульатата из базы данных
	
	public function __construct($settings) {
		$this -> settings = $settings;
		$this -> filter = [
			'method' => 'and',
			'filters' => []
		];
	}
	
	abstract public function connect();
	abstract public function close();
	abstract public function launch();
	
}

?>